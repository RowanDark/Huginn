name: Huginn CI/CD Pipeline

on:
push:
branches: [ main, develop ]
pull_request:
branches: [ main ]

env:
REGISTRY: ghcr.io
IMAGE_NAME: ${{ github.repository }}

jobs:
test-go:
name: Test Go Engine
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4

text
- name: Set up Go
  uses: actions/setup-go@v4
  with:
    go-version: '1.21'
    
- name: Cache Go modules
  uses: actions/cache@v3
  with:
    path: ~/go/pkg/mod
    key: ${{ runner.os }}-go-${{ hashFiles('services/go-engine/go.sum') }}
    restore-keys: |
      ${{ runner.os }}-go-
      
- name: Test Go Engine
  working-directory: services/go-engine
  run: |
    go mod tidy
    go test -v ./...
    go build -v .
test-rust:
name: Test Rust Security
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4

text
- name: Set up Rust
  uses: actions-rs/toolchain@v1
  with:
    toolchain: stable
    profile: minimal
    override: true
    components: rustfmt, clippy
    
- name: Cache Rust dependencies
  uses: actions/cache@v3
  with:
    path: |
      ~/.cargo/bin/
      ~/.cargo/registry/index/
      ~/.cargo/registry/cache/
      ~/.cargo/git/db/
      services/rust-security/target/
    key: ${{ runner.os }}-cargo-${{ hashFiles('services/rust-security/Cargo.lock') }}
    
- name: Check Rust formatting
  working-directory: services/rust-security
  run: cargo fmt -- --check
  
- name: Run Clippy
  working-directory: services/rust-security
  run: cargo clippy -- -D warnings
  
- name: Test Rust Security
  working-directory: services/rust-security
  run: |
    cargo test --verbose
    cargo build --release
test-python:
name: Test Python AI
runs-on: ubuntu-latest
strategy:
matrix:
python-version: [3.11, 3.12]

text
steps:
- uses: actions/checkout@v4

- name: Set up Python ${{ matrix.python-version }}
  uses: actions/setup-python@v4
  with:
    python-version: ${{ matrix.python-version }}
    
- name: Cache Python dependencies
  uses: actions/cache@v3
  with:
    path: ~/.cache/pip
    key: ${{ runner.os }}-pip-${{ hashFiles('services/python-ai/requirements.txt') }}
    restore-keys: |
      ${{ runner.os }}-pip-
      
- name: Install Python dependencies
  working-directory: services/python-ai
  run: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install pytest pytest-asyncio black isort flake8 mypy
    
- name: Check Python formatting
  working-directory: services/python-ai
  run: |
    black --check .
    isort --check-only .
    
- name: Run Python linting
  working-directory: services/python-ai
  run: |
    flake8 .
    mypy . --ignore-missing-imports
    
- name: Test Python AI
  working-directory: services/python-ai
  run: pytest -v
integration-test:
name: Integration Tests
runs-on: ubuntu-latest
needs: [test-go, test-rust, test-python]

text
steps:
- uses: actions/checkout@v4

- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3
  
- name: Start services with Docker Compose
  run: |
    docker-compose up -d
    sleep 30
    
- name: Run integration tests
  run: |
    # Test service health endpoints
    curl -f http://localhost:8080/health || exit 1
    curl -f http://localhost:8081/health || exit 1  
    curl -f http://localhost:8082/health || exit 1
    
- name: Stop services
  run: docker-compose down
security-scan:
name: Security Scanning
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4

text
- name: Run Trivy vulnerability scanner
  uses: aquasecurity/trivy-action@master
  with:
    scan-type: 'fs'
    scan-ref: '.'
    format: 'sarif'
    output: 'trivy-results.sarif'
    
- name: Upload Trivy scan results to GitHub Security tab
  uses: github/codeql-action/upload-sarif@v2
  with:
    sarif_file: 'trivy-results.sarif'
build-and-push:
name: Build and Push Images
runs-on: ubuntu-latest
needs: [test-go, test-rust, test-python, integration-test]
if: github.event_name == 'push' && github.ref == 'refs/heads/main'

text
permissions:
  contents: read
  packages: write
  
steps:
- uses: actions/checkout@v4

- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3
  
- name: Log in to Container Registry
  uses: docker/login-action@v3
  with:
    registry: ${{ env.REGISTRY }}
    username: ${{ github.actor }}
    password: ${{ secrets.GITHUB_TOKEN }}
    
- name: Extract metadata
  id: meta
  uses: docker/metadata-action@v5
  with:
    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    tags: |
      type=ref,event=branch
      type=ref,event=pr
      type=sha
      
- name: Build and push Go Engine image
  uses: docker/build-push-action@v5
  with:
    context: .
    file: services/go-engine/Dockerfile
    push: true
    tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-go-engine:${{ github.sha }}
    cache-from: type=gha
    cache-to: type=gha,mode=max
    
- name: Build and push Rust Security image
  uses: docker/build-push-action@v5
  with:
    context: .
    file: services/rust-security/Dockerfile
    push: true
    tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rust-security:${{ github.sha }}
    cache-from: type=gha
    cache-to: type=gha,mode=max
    
- name: Build and push Python AI image
  uses: docker/build-push-action@v5
  with:
    context: .
    file: services/python-ai/Dockerfile
    push: true
    tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-python-ai:${{ github.sha }}
    cache-from: type=gha
    cache-to: type=gha,mode=max
deploy-staging:
name: Deploy to Staging
runs-on: ubuntu-latest
needs: [build-and-push]
if: github.ref == 'refs/heads/develop'
environment: staging

text
steps:
- uses: actions/checkout@v4

- name: Deploy to staging environment
  run: |
    echo "Deploying to staging with image tags: ${{ github.sha }}"
    # Add your staging deployment commands here
    
deploy-production:
name: Deploy to Production
runs-on: ubuntu-latest
needs: [build-and-push]
if: github.ref == 'refs/heads/main'
environment: production

text
steps:
- uses: actions/checkout@v4

- name: Deploy to production environment
  run: |
    echo "Deploying to production with image tags: ${{ github.sha }}"
    # Add your production deployment commands here
