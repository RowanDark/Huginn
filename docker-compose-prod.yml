# OSINT Scraper Platform - Production Docker Compose
# Integrates Go engine, Rust security, Python AI/NLP, and supporting services

version: '3.8'

services:
  # Redis for job queues and caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - osint_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Go-based scraping engine
  go-engine-api:
    build:
      context: ./go-engine
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis:6379
      - RUST_SECURITY_URL=http://rust-security:8081
      - PYTHON_AI_URL=http://python-ai:8082
      - LOG_LEVEL=info
      - WORKER_POOL_SIZE=10
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - osint_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Go worker instances for distributed processing
  go-engine-worker:
    build:
      context: ./go-engine
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["./worker"]
    environment:
      - REDIS_URL=redis:6379
      - RUST_SECURITY_URL=http://rust-security:8081
      - PYTHON_AI_URL=http://python-ai:8082
      - LOG_LEVEL=info
      - CONCURRENT_JOBS=5
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - osint_network
    deploy:
      replicas: 3

  # Rust-based security and anti-detection service
  rust-security:
    build:
      context: ./rust-security
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - RUST_LOG=info
      - FINGERPRINT_ROTATION_INTERVAL=300
      - TLS_PROFILE_COUNT=10
    networks:
      - osint_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Python AI/NLP and threat intelligence service
  python-ai:
    build:
      context: ./python-ai
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - REDIS_URL=redis:6379
      - MODEL_CACHE_DIR=/app/models
      - TRANSFORMERS_CACHE=/app/models/transformers
      - THREAT_INTEL_API_KEY=${THREAT_INTEL_API_KEY}
    volumes:
      - ai_models:/app/models
    networks:
      - osint_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - go-engine-api
      - rust-security
      - python-ai
    networks:
      - osint_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - osint_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - osint_network

volumes:
  redis_data:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  osint_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
